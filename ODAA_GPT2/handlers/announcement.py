import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from ODAA_GPT2.models import Teacher, Student, SessionLocal
from ODAA_GPT2.utils.keyboards import get_teacher_keyboard

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
ANNOUNCE_TEXT = 30

async def announce_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    session = SessionLocal()
    teacher = session.query(Teacher).filter(Teacher.telegram_id == user.id).first()
    session.close()
    if not teacher:
        await update.message.reply_text(
            "–§—É–Ω–∫—Ü–∏—è '–°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —à–∫–æ–ª—ã –∏ —Å—Ç—É–¥–∏–∏.",
            reply_markup=get_teacher_keyboard()
        )
        return ConversationHandler.END
    await update.message.reply_text(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äì –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    return ANNOUNCE_TEXT

async def announce_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    announcement_text = update.message.text.strip()
    if announcement_text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await announce_cancel(update, context)
    session = SessionLocal()
    teachers = session.query(Teacher).all()
    students = session.query(Student).all()
    session.close()
    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: –≤—Å–µ —É—á–∏—Ç–µ–ª—è –∏ —É—á–µ–Ω–∏–∫–∏
    recipients = {t.telegram_id for t in teachers} | {s.telegram_id for s in students}
    app = context.application
    for recipient in recipients:
        try:
            await app.bot.send_message(chat_id=recipient, text=f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{announcement_text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient}: {e}")
    await update.message.reply_text(
        "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üì¢ –°–ø–∞—Å–∏–±–æ!",
        reply_markup=get_teacher_keyboard()
    )
    return ConversationHandler.END

async def announce_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–û—Ç–º–µ–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. üëç",
        reply_markup=get_teacher_keyboard()
    )
    return ConversationHandler.END
