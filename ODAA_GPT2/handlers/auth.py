import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from ODAA_GPT2.models import Teacher, Student, SessionLocal
from ODAA_GPT2.utils.keyboards import get_main_keyboard, get_teacher_keyboard, get_student_keyboard

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
TEACHER_LOGIN, TEACHER_PASSWORD = range(2)
STUDENT_FIRST_NAME, STUDENT_LAST_NAME, STUDENT_PHONE = range(10, 13)

# –ñ—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π (–¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ)
teacher_credentials = {
    "andrey": "Andrey2025!",
    "ilya": "Ilya2025@",
    "angelina": "Angelina2025#",
    "vika": "Vika2025$",
    "ira": "Ira2025%",
    "mila": "Mila2025^",
    "kristina": "Kristina2025!",
    "vera": "Vera2025@",
    "katerina": "Katerina2025#"
}

logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Ä–æ–ª–∏
async def reset_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    session = SessionLocal()
    teacher = session.query(Teacher).filter(Teacher.telegram_id == user.id).first()
    if teacher:
        session.delete(teacher)
        session.commit()
        context.user_data.clear()
        await update.message.reply_text(
            "–í–∞—à–∞ —Ä–æ–ª—å —É—á–∏—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å. üîÑ",
            reply_markup=ReplyKeyboardRemove()
        )
        session.close()
        return
    student = session.query(Student).filter(Student.telegram_id == user.id).first()
    if student:
        session.delete(student)
        session.commit()
        context.user_data.clear()
        await update.message.reply_text(
            "–í–∞—à–∞ —Ä–æ–ª—å —É—á–µ–Ω–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å. üîÑ",
            reply_markup=ReplyKeyboardRemove()
        )
        session.close()
        return
    session.close()
    await update.message.reply_text(
        "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–π —Ä–æ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—á–∏—Ç–µ–ª–µ–π
async def teacher_login_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if context.user_data.get("role"):
        await update.message.reply_text(
            "–í–∞—à–∞ —Ä–æ–ª—å —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–±—Ä–æ—Å–æ–º —Ä–æ–ª–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    context.user_data["role"] = "–£—á–∞—Å—Ç–Ω–∏–∫ —à–∫–æ–ª—ã –∏ —Å—Ç—É–¥–∏–∏"
    await update.message.reply_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å üë®‚Äçüè´ *–£—á–∞—Å—Ç–Ω–∏–∫ —à–∫–æ–ª—ã –∏ —Å—Ç—É–¥–∏–∏*.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    return TEACHER_LOGIN

async def teacher_login_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    login_input = update.message.text.strip()
    context.user_data["teacher_login"] = login_input
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîê (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã):",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )
    return TEACHER_PASSWORD

async def teacher_password_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text.lower() == "–Ω–∞–∑–∞–¥":
        context.user_data.pop("role", None)
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    password_input = text
    login_input = context.user_data.get("teacher_login")
    if login_input in teacher_credentials and teacher_credentials[login_input] == password_input:
        session = SessionLocal()
        existing = session.query(Teacher).filter(Teacher.telegram_id == update.effective_user.id).first()
        if not existing:
            teacher = Teacher(
                telegram_id=update.effective_user.id, 
                login=login_input,
                role="–£—á–∞—Å—Ç–Ω–∏–∫ —à–∫–æ–ª—ã –∏ —Å—Ç—É–¥–∏–∏"
            )
            session.add(teacher)
            session.commit()
        session.close()
        await update.message.reply_text("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! üéâ", reply_markup=get_teacher_keyboard())
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=ReplyKeyboardRemove())
        context.user_data.pop("role", None)
    return ConversationHandler.END

async def teacher_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.pop("role", None)
    await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤
async def student_registration_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if context.user_data.get("role"):
        await update.message.reply_text(
            "–í–∞—à–∞ —Ä–æ–ª—å —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–±—Ä–æ—Å–æ–º —Ä–æ–ª–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    context.user_data["role"] = "–£—á–µ–Ω–∏–∫"
    await update.message.reply_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å üßë‚Äçüéì *–£—á–µ–Ω–∏–∫*.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    return STUDENT_FIRST_NAME

async def student_first_name_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    first_name = update.message.text.strip()
    context.user_data["student_first_name"] = first_name
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã):",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )
    return STUDENT_LAST_NAME

async def student_last_name_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text.lower() == "–Ω–∞–∑–∞–¥":
        context.user_data.pop("role", None)
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    last_name = text
    context.user_data["student_last_name"] = last_name
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã):",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ù–∞–∑–∞–¥")]], resize_keyboard=True)
    )
    return STUDENT_PHONE

async def student_phone_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text.lower() == "–Ω–∞–∑–∞–¥":
        context.user_data.pop("role", None)
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    phone = text
    first_name = context.user_data["student_first_name"]
    last_name = context.user_data["student_last_name"]
    session = SessionLocal()
    existing_student = session.query(Student).filter(Student.telegram_id == update.effective_user.id).first()
    if not existing_student:
        student = Student(
            telegram_id=update.effective_user.id, 
            first_name=first_name, 
            last_name=last_name, 
            phone=phone, 
            role="–£—á–µ–Ω–∏–∫"
        )
        session.add(student)
        session.commit()
    session.close()
    await update.message.reply_text(
        f"üéâ –£—Ä–∞, {first_name} {last_name}! –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}",
        reply_markup=get_student_keyboard()
    )
    return ConversationHandler.END

async def student_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.pop("role", None)
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END
