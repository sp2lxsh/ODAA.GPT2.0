import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from ODAA_GPT2.models import Teacher, Student, SessionLocal
from ODAA_GPT2.utils.keyboards import get_main_keyboard, get_student_keyboard

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
SUBMIT_HOMEWORK = 60

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async def attach_homework_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    session = SessionLocal()
    student = session.query(Student).filter(Student.telegram_id == user.id).first()
    session.close()
    if not student:
        await update.message.reply_text(
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    await update.message.reply_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Å—ã–ª–∫—É) —Å –≤–∞—à–∏–º –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º.\n–ï—Å–ª–∏ –≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ì–æ—Ç–æ–≤–æ")]], resize_keyboard=True)
    )
    return SUBMIT_HOMEWORK

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async def attach_homework_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text and update.message.text.strip().lower() == "–≥–æ—Ç–æ–≤–æ":
        await update.message.reply_text("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_student_keyboard())
        return ConversationHandler.END

    submission = None
    if update.message.document:
        submission = f"–î–æ–∫—É–º–µ–Ω—Ç (file_id: {update.message.document.file_id})"
    elif update.message.photo:
        submission = f"–§–æ—Ç–æ (file_id: {update.message.photo[-1].file_id})"
    elif update.message.text:
        if update.message.text.strip() in ["–ú–æ–π —É—Ä–æ–∫", "–ú–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"]:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É —Å –≤–∞—à–∏–º –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏.",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ì–æ—Ç–æ–≤–æ")]], resize_keyboard=True)
            )
            return SUBMIT_HOMEWORK
        submission = update.message.text.strip()
    
    if not submission:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç."
        )
        return SUBMIT_HOMEWORK

    user = update.effective_user
    session = SessionLocal()
    student = session.query(Student).filter(Student.telegram_id == user.id).first()
    if student:
        if student.homework:
            student.homework += f"\n–°–¥–∞–Ω–æ: {submission}"
        else:
            student.homework = f"–°–¥–∞–Ω–æ: {submission}"
        session.commit()
    session.close()
    
    await update.message.reply_text(
        "‚úÖ –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ì–æ—Ç–æ–≤–æ")]], resize_keyboard=True)
    )
    
    session = SessionLocal()
    teachers = session.query(Teacher).all()
    session.close()
    app = context.application
    notify_text = f"–£—á–µ–Ω–∏–∫ {student.first_name} {student.last_name} –ø—Ä–∏–∫—Ä–µ–ø–∏–ª –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{submission}"
    for teacher in teachers:
        try:
            await app.bot.send_message(chat_id=teacher.telegram_id, text=notify_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—é {teacher.telegram_id}: {e}")
    return SUBMIT_HOMEWORK

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
async def view_homework(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    session = SessionLocal()
    student = session.query(Student).filter(Student.telegram_id == user.id).first()
    session.close()
    if student and student.homework:
        await update.message.reply_text(f"–í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{student.homework}", reply_markup=get_student_keyboard())
    else:
        await update.message.reply_text("–î–ª—è –≤–∞—Å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ.", reply_markup=get_student_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ
async def view_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    session = SessionLocal()
    student = session.query(Student).filter(Student.telegram_id == user.id).first()
    session.close()
    if student and student.next_lesson:
        await update.message.reply_text(f"–í–∞—à —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞: {student.next_lesson}", reply_markup=get_student_keyboard())
    else:
        await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.", reply_markup=get_student_keyboard())
