import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from ODAA_GPT2.models import Teacher, Student, SessionLocal
from ODAA_GPT2.utils.keyboards import get_teacher_keyboard

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∏—Ç–µ–ª–µ–º
TEACHER_SELECT_STUDENT, TEACHER_ACTION_SELECTION, TEACHER_EDIT_LESSON_DATE, TEACHER_EDIT_HOMEWORK = range(20, 24)

async def panel_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    session = SessionLocal()
    teacher = session.query(Teacher).filter(Teacher.telegram_id == update.effective_user.id).first()
    if not teacher:
        await update.message.reply_text(
            "–§—É–Ω–∫—Ü–∏—è '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è' –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —à–∫–æ–ª—ã –∏ —Å—Ç—É–¥–∏–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        session.close()
        return ConversationHandler.END
    context.user_data.pop("selected_student_id", None)
    students = session.query(Student).all()
    session.close()
    if not students:
        await update.message.reply_text(
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    keyboard = [[KeyboardButton(f"{s.first_name} {s.last_name}")] for s in students]
    keyboard.append([KeyboardButton("–û—Ç–º–µ–Ω–∞")])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    return TEACHER_SELECT_STUDENT

async def teacher_select_student(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_teacher_keyboard())
        return ConversationHandler.END
    if " " not in text:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ò–º—è –§–∞–º–∏–ª–∏—è'.", reply_markup=get_teacher_keyboard())
        return ConversationHandler.END
    first_name, last_name = text.split(" ", 1)
    session = SessionLocal()
    student = session.query(Student).filter(
        Student.first_name == first_name,
        Student.last_name == last_name
    ).first()
    session.close()
    if not student:
        await update.message.reply_text("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=get_teacher_keyboard())
        return ConversationHandler.END
    context.user_data["selected_student_id"] = student.telegram_id
    keyboard = [
        [KeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫")],
        [KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫")],
        [KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—á–µ–Ω–∏–∫–∞: {student.first_name} {student.last_name}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return TEACHER_ACTION_SELECTION

async def teacher_action_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    action = update.message.text.strip().lower()
    if action == "–Ω–∞–∑–∞–¥":
        return await panel_start(update, context)
    elif action == "—Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫":
        session = SessionLocal()
        student = session.query(Student).filter(Student.telegram_id == context.user_data["selected_student_id"]).first()
        session.close()
        if student:
            status = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" if student.homework and "–°–¥–∞–Ω–æ:" in student.homework else "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            await update.message.reply_text(
                f"–£—á–µ–Ω–∏–∫ {student.first_name} {student.last_name}:\n–£—Ä–æ–∫: {student.next_lesson}\n–°—Ç–∞—Ç—É—Å –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {status}",
                reply_markup=get_teacher_keyboard()
            )
        else:
            await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=get_teacher_keyboard())
        return ConversationHandler.END
    elif action == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫":
        keyboard = [[KeyboardButton("–ù–∞–∑–∞–¥")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-02-08 10:00):",
            reply_markup=reply_markup
        )
        return TEACHER_EDIT_LESSON_DATE
    elif action == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
        student_id = context.user_data.get("selected_student_id")
        session = SessionLocal()
        student = session.query(Student).filter(Student.telegram_id == student_id).first()
        session.close()
        if student and student.next_lesson and student.homework:
            await update.message.reply_text(
                f"–£—á–µ–Ω–∏–∫ {student.first_name} {student.last_name}:\n–£—Ä–æ–∫: {student.next_lesson}\n–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {student.homework}",
                reply_markup=get_teacher_keyboard()
            )
        else:
            await update.message.reply_text(
                "–î–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—Ä–æ–∫ –∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.",
                reply_markup=get_teacher_keyboard()
            )
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.", reply_markup=get_teacher_keyboard())
        return ConversationHandler.END

async def teacher_edit_lesson_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text.lower() == "–Ω–∞–∑–∞–¥":
        return await teacher_action_selection(update, context)
    context.user_data["next_lesson"] = text
    keyboard = [[KeyboardButton("–ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞:", reply_markup=reply_markup)
    return TEACHER_EDIT_HOMEWORK

async def teacher_edit_homework(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text.lower() == "–Ω–∞–∑–∞–¥":
        return await teacher_action_selection(update, context)
    homework = text
    selected_student_id = context.user_data.get("selected_student_id")
    next_lesson = context.user_data.get("next_lesson")
    session = SessionLocal()
    student = session.query(Student).filter(Student.telegram_id == selected_student_id).first()
    if student:
        student.next_lesson = next_lesson
        student.homework = homework
        session.commit()
    session.close()
    app = context.application
    await app.bot.send_message(
        chat_id=selected_student_id, 
        text=f"üì¢ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –Ω–∞ {next_lesson}.\n–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {homework}"
    )
    session = SessionLocal()
    teachers = session.query(Teacher).all()
    session.close()
    for t in teachers:
        await app.bot.send_message(
            chat_id=t.telegram_id, 
            text=f"–£—á–µ–Ω–∏–∫ {student.first_name} {student.last_name} –ø–æ–ª—É—á–∏–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ:\n–£—Ä–æ–∫: {next_lesson}\n–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {homework}"
        )
    await update.message.reply_text("–£—Ä–æ–∫ –∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã! üëç", reply_markup=get_teacher_keyboard())
    return ConversationHandler.END

async def teacher_panel_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_teacher_keyboard())
    return ConversationHandler.END
